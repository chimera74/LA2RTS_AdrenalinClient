uses SysUtils,TCP;
  
const
	PING_INTERVAL_MS = 5000;
	STATIC_DATA_MESSAGE_INTERVAL_MS = 60000;
	POSITION_MESSAGE_INTERVAL_MS = 500;

	SELF_INFO_REQUEST_PACKET = 5;
	POSITION_SEND_ENABLE_PACKET = 6;
	LOGIN_PACKET = 7;
	
var 
	i, j: integer;
	
	//TCP Socket variables
	TCPSocket: TTCPBlockSocket;
	IP, Port: string;
	RecvBuff:array[0..1023] of byte;
	SendBuff:array[0..1023] of byte;
	sendBuffLength: integer;
	RecvByte: byte;
	sendRes, recvRes: Integer;
	waitingDataAmount: Integer;
	

	// State variables  
	IsInGame : Boolean;
	IsPositionSendingEnabled : Boolean;
	IsSurroundingSendingEnabled : Boolean;

	// Time variables
	lastPingTime : Longint;
	lastDataMessageTime : Longint;
	lastPositionMessageTime : Longint;

//test 

label
  start_connection;

procedure OnFree;
begin
  TCPSocket.Free;
end;

procedure Init;
begin
	IsPositionSendingEnabled := false;
	IsSurroundingSendingEnabled := false;
	
	lastPingTime := 0;
	lastDataMessageTime := 0;
	lastPositionMessageTime := 0;
end;

//test 

procedure PutIntToBuff(val: Integer);
begin
  Move(val, SendBuff[sendBuffLength], 4);
  sendBuffLength := sendBuffLength + 4;
end;

procedure PutStrToBuff(str: string);
var strLen : Integer;
begin
  strLen := Length(str) * 2;
  PutIntToBuff(strLen);
  Move(str[1], SendBuff[sendBuffLength], strLen);
  sendBuffLength := sendBuffLength + strLen;
end;

//test
procedure PutDoubleToBuff(val: Double);
begin
  Move(val, SendBuff[sendBuffLength], 8);
  sendBuffLength := sendBuffLength + 8;
end;

procedure SendPing;
begin
  SendBuff[0] := $01;
  SendBuffLength := 1;
  sendRes := TCPSocket.SendBuffer(@SendBuff, sendBuffLength);
  lastPingTime := GetTickCount();
end;

//ID, OID, Name, X, Y, Z
procedure SendSelfInfo;
begin

  SendBuff[0] := $03;
  sendBuffLength := 1;

  PutIntToBuff(User.OID);
  PutIntToBuff(User.ID);

  PutStrToBuff(User.Name);

  PutIntToBuff(User.X);
  PutIntToBuff(User.Y);
  PutIntToBuff(User.Z);
  
  sendRes := TCPSocket.SendBuffer(@SendBuff, sendBuffLength);    
  print('Sent Data Message. Length: ' + sendBuffLength.tostring);
end;

procedure SendPosition;
begin
	SendBuff[0] := $04;
	sendBuffLength := 1;
	
	PutIntToBuff(User.X);
	PutIntToBuff(User.Y);
	PutIntToBuff(User.Z);
	
	PutIntToBuff(User.ToX);
	PutIntToBuff(User.ToY);
	PutIntToBuff(User.ToZ);
	
	PutDoubleToBuff(User.Speed);
	
	sendRes := TCPSocket.SendBuffer(@SendBuff, sendBuffLength);    
end;

procedure ProcessPositionSend;
begin
	if not IsPositionSendingEnabled then exit;	
	if not IsInGame then exit;
	if GetTickCount() - lastPositionMessageTime < POSITION_MESSAGE_INTERVAL_MS then exit;
	
	SendPosition();
	lastPositionMessageTime := GetTickCount();
end;


procedure ProcessDataSend;
begin
	
	ProcessPositionSend();
	
	{
	if GetTickCount() - lastPingTime > PING_INTERVAL_MS then begin
      SendPing();
      lastPingTime := GetTickCount();
    end;
	
    if GetTickCount() - lastDataMessageTime > STATIC_DATA_MESSAGE_INTERVAL_MS then begin
      SendSelfInfo();
      lastDataMessageTime := GetTickCount();
    end;
	}
	
end;
procedure LogRecvPacketError;
begin
	print('Packet format error on packet ' + RecvBuff[0].tostring());
end;

procedure ProcessPositionSendEnable;
begin
	Case RecvBuff[1] of
	0: IsPositionSendingEnabled := false;
	1: IsPositionSendingEnabled := true;
	else
		LogRecvPacketError();
end;

procedure ProcessSelfInfoRequest;
begin
	SendSelfInfo();
end;

procedure ProcessLoginRequest;
begin
	Engine.EnterText('cschim_se1');
	Engine.UseKey('TAB');
	Engine.EnterText('8PweCDQdJGVtoXo6');
	
	Delay(3000);
	
	Engine.UseKey('Enter');
	
	Delay(3000);
	
	Engine.GameStart;
	
end;

procedure ProcessUnknownPacket()
begin
	print('Unknown packet ' + buffer[0].tosting());
end;

procedure ProcessDataRecive;
begin
	waitingDataAmount := TCPSocket.WaitingData();    
	
	if waitingDataAmount > 0 then begin
		for i:=0 to waitingDataAmount do
		begin
			RecvBuff[i] := TCPSocket.RecvByte(50);
			
			Case RecvBuff[0] of
			SELF_INFO_REQUEST_PACKET : ProcessSelfInfoRequest();
			POSITION_SEND_ENABLE_PACKET : ProcessPositionSendEnable();
			LOGIN_PACKET : ProcessLoginRequest();
			else 
				ProcessUnknownPacket();
			end;
		end;
	end;   
end;


procedure ProcessInGameCheck;
begin
	if Engine.Status = lsOnline then
	begin
		if IsInGame = false then
			SendStatusMessage();
		IsInGame := true
	end
	else
	begin
		if IsInGame = true then
			SendStatusMessage();
		IsInGame := false;
	end;
end;

begin
  
  IP := '127.0.0.1';
  Port := '30512';
  
  TCPSocket := TTCPBlockSocket.Create;

  Init();
  
start_connection:
  TCPSocket.Connect(IP, Port);
  if (TCPSocket.LastError <> 0) then  
  begin
    print('Failed to connect. Error: ' + TCPSocket.LastError.tostring + '. Retrying in 5 sec.');
    Delay(5000);
    goto start_connection
  end;

  //connetced
  print('Connected.');
  lastPingTime := 0;
  
  repeat    

    // Master loop	
	ProcessDataRecieve();
	ProcessDataSend();
	ProcessInGameCheck();
	
    Delay(10);
    
  until sendRes = 0;

  print('Lost connection. Reconnecting in 5 sec.');
  TCPSocket.Free;
  Delay(5000);
  TCPSocket := TTCPBlockSocket.Create;
  goto start_connection;
  
end.